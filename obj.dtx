% \iffalse meta-comment
% arara: clean: { files: [ obj.aux, obj.glo, obj.hd, obj.idx, obj.ilg, obj.ind, obj.out ] }
% arara: make: { task: "obj.tex" }
% arara: pdflatex
% arara: makeindex: { style: gind.ist, options: "-o obj.ind" }
% arara: pdflatex
% arara: pdflatex
%
%%
%% File: obj.dtx Copyright(C) 2015 Sean Allred
%%
%% obj.dtx may be distributed and/or modified under the
%% conditions of the LaTeX Project Public License (LPPL),
%% either version 1.3c of this license or (at your option)
%% any later version.  The latest version of this license is
%% in the file
%%
%%    http://www.latex-project.org/lppl.txt
%%
%% The released version is available from CTAN.
%%
%% -----------------------------------------------------------------------
%%
%% The development version can be found at
%%
%%    http://www.github.com/vermiculus/tex-obj
%%
%% for those people who are interested.
%%
%% -----------------------------------------------------------------------
%%
%
%<*driver>
\documentclass[full]{l3doc}
\def\ExplFileName{obj}
\def\ExplFileVersion{0.2}
\def\ExplFileDate{2015-07-06}
\def\ExplFileDescription{Objects for \pkg{expl3}}
\def\ExplFileExtension{dtx}
\begin{document}
\renewcommand\partname{Part}
\DoNotIndex{\g_demo_rect}
\DocInput{\jobname.dtx}
\end{document}
%</driver>
% \fi
%
% \title{^^A
%   The \pkg{obj} module \\ Objects for \pkg{expl3}^^A
%   \thanks{This file describes v\ExplFileVersion,
%     last revised \ExplFileDate.}^^A
% }
%
% \author{^^A
%  Sean Allred\thanks
%    {^^A
%      E-mail:
%        \href{mailto:tex@seanallred.com}
%          {tex@seanallred.com}^^A
%    }^^A
% }
%
% \date{Released \ExplFileDate}
%
% \maketitle
%
% \begin{documentation}
%
%   This module provides simple support for objects in \pkg{expl3}.
%
%   \paragraph{Example of use}
%    \begin{verbatim}
% \obj_new:nn { rectangle }
%   {
%     length: int,
%     width: int,
%     stroke-color: color = black,
%     fill-color: color = white
%   }
% \obj_new:nn { rectangle / rhombus }
%   { angle: int = 45 }
% \rhombus_new:Nn \l_demo_rhombus
%   {
%     length = 4,
%     stroke-color = gray,
%   }
% \rhombus_show:N \l_demo_rhombus
%    \end{verbatim}
%    \hrule
%    \begin{verbatim}
% The property list \l_demo_rhombus contains the pairs [...]:
% >  {length}  =>  {4}
% >  {width}  =>  {}
% >  {stroke-color}  =>  {gray}
% >  {fill-color}  =>  {white}
% >  {angle}  =>  {45}.
%    \end{verbatim}
% \newpage
% \tableofcontents
% \section*{Introduction}
%
% Object-orientism is a well-known paradigm in computer programming.  Simply
% put, it is a way of thinking about programs that perceives its logic to be
% manipulating `objects': setting and retrieving properties of any given object
% and using them to drive the program.
%
% Implementing this in \TeX\ is a challenge made much easier with \pkg{expl3}.
% By cleverly using property lists, classes and objects can be simply realized
% without much trouble.  This implementation supports data types, defaults, and
% method creation (as well as the plumbing of instantiation\slash population).
%
% \newpage
%
% \part{Interface Documentation}
%
% \begin{function}[added = 2015-07-08]{\obj_new:nn}
%   \begin{syntax}
%     \cs{obj_new:nn} \Arg{class-name} \Arg{specification}
%   \end{syntax}
% \end{function}
%
% \begin{function}[added = 2015-07-08]{\obj_show:n}
%   \begin{syntax}
%     \cs{obj_show:n} \Arg{class-name}
%   \end{syntax}
% \end{function}
%
% \begin{function}[added = 2015-07-08]{\obj_method:nnn}
%   \begin{syntax}
%     \cs{obj_method:nnn} \Arg{class-name} \Arg{method-name} \Arg{implementation}
%   \end{syntax}
% \end{function}
%
% \begin{function}[added = 2015-07-08]{\obj_this:nN}
%   \begin{syntax}
%     \cs{obj_this:nN} \Arg{field-name} \meta{destination-var}
%   \end{syntax}
%   Created dynamically by \cs{obj_method:nnn},
% \end{function}
%
% \begin{function}[added = 2015-07-08]{\obj_use_method:nn}
%   \begin{syntax}
%     \cs{obj_use_method:nn} \Arg{class-name} \Arg{method-name}
%   \end{syntax}
% \end{function}
%
% \begin{variable}[added = 2015-07-08]{\g__obj_types_clist}
%   The list of types known to \pkg{obj}.  By default, the `primitive' types of
%   expl3 are available.  Not much is done with this value, currently.
%   Eventually, it will be used to automatically instantiate fields.  (A
%   corresponding `no-instantiate' list will also need to be maintained; e.g.,
%   it doesn't make sense to create an `onject' field.)
% \end{variable}
%
%
% \newpage
%
% \part{Examples}
%
% \end{documentation}
%
% \newpage
%
% \part{Implementation}
%
% Before I begin, I want to establish a few definitions:
% \begin{description}
% \item[object] A complex collection of data with defined behavior.  These are
%   also called instantiations.
% \item[class] A definition of (or blueprint for) a kind of object.  Often
%   used interchangeably with `type'.
% \item[super-class, sub-class] ***
% \item[method] A function designed to work with a particular class of objects.
% \item[field] A piece of data that belongs to an object.
% \end{description}
%
% \begin{implementation}
%    \begin{macrocode}
%<*package>
%<@@=obj>
%    \end{macrocode}
% \section{Dependencies}
% This module depends on \pkg{parsing}.  It is included with this documentation,
% but is not documented itself.  Its status is still in limbo (much like this
% module, but less so).
%    \begin{macrocode}
\file_input:n { parsing }
%    \end{macrocode}
% \section{Creating classes}
%
% Classes are implemented as a pair of property lists:
% \begin{description}
% \item[specification] A mapping of fields to types.
% \item[prototype] A mapping of fields to default values.
% \end{description}
% These property lists are both stored in a sequence of the form
% |\g__obj_spec_?_seq|, where |?| is the class name.  This sequence will only
% ever have two items: the specification is on the left while the prototype is
% on the right.
%
% They were collected into one sequence to keep the namespace free of clutter
% and to ease confusion during the development of this package, but storing the
% property lists `naked' in their own variables would be faster.
%
% \begin{macro}{\obj_new:nn}
%   When a new class is defined, several actions have to take place:
%   \begin{itemize}
%   \item The specification and the prototype must be created.  (These must obey
%     any inheritence specified.)
%   \item Each field must be processed and added to the specification and
%     prototype as appropriate.
%   \item Certain plumbing methods must be created to instantiate objects and
%     set\slash retrieve the data in their fields.
%   \end{itemize}
%   For ease of reading, these parts have been split up.  In a maintenance
%   release, these different pieces will be merged together.  For this first
%   release though, it is much easier to take advantage of
%   \cs{cs_generate_variant:Nn} to simplify the code for review.
%    \begin{macrocode}
\tl_new:N \l_@@_class_name_tl
\cs_new:Nn \obj_new:nn
  {
    \@@_define:nnN {#1} {#2} \l_@@_class_name_tl
    \@@_process_fields:Vn \l_@@_class_name_tl {#2}
    \@@_make_metas:V \l_@@_class_name_tl
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}[aux]{\@@_define:nnN}
%   \begin{syntax}
%     \cs{__obj_define:nnN} \Arg{name} \Arg{specification} \meta{tl-var}
%   \end{syntax}
%   A |name| of the form |{ superclass / class }| is pieced out into
%   \meta{superclass} and \meta{class}.  \meta{class} is placed into
%   \meta{tl-var} and \meta{superclass} is placed into \cs{l_@@_tmp_tl}.  If
%   there is no superclass, \meta{class} is created without inheriting from any
%   other class (i.e., there is no pre-existing specification or prototype).
%    \begin{macrocode}
\prop_new:N \l_@@_spec_prop
\prop_new:N \l_@@_proto_prop
\cs_new:Nn \@@_define:nnN
  {
    \seq_set_split:Nnn \l_@@_tmp_seq { / } {#1}
    \seq_pop_right:NN  \l_@@_tmp_seq #3
    \seq_pop_right:NN  \l_@@_tmp_seq \l_@@_tmp_tl
    \quark_if_no_value:NTF \l_@@_tmp_tl
      { \@@_setup:VNN #3 \c_empty_prop \c_empty_prop }
      {
%    \end{macrocode}
%   Otherwise, we grab the superclass's specification and prototype and base our
%   new object off of it.
%    \begin{macrocode}
        \@@_spec:VN      \l_@@_tmp_tl    \l_@@_spec_prop
        \@@_proto:VN     \l_@@_tmp_tl    \l_@@_proto_prop
        \@@_setup:VNN #3 \l_@@_spec_prop \l_@@_proto_prop
%    \end{macrocode}
%   We have to make sure that defaults for existing fields are updated
%   correctly.
%
%   ^^A \item Is this still necessary?  Isn't this done again in process_fields?
%   ^^A \item TODO #3 used to be \l_@@_tmp_tl
%    \begin{macrocode}
        \@@_proto:VN #3 \l_@@_tmp_prop
        \parse_dictionary:nn {#2}
          {
            \prop_if_in:NVF \l_@@_proto_prop \l_parse_dictionary_key_tl
              {
                \prop_put:NVV \l_@@_tmp_prop
                  \l_parse_dictionary_key_tl
                  \l_parse_dictionary_value_tl
              }
          }
        \@@_proto:NV \l_@@_tmp_prop \l_@@_tmp_tl
      }
  }
%    \end{macrocode}
% \end{macro}
% \begin{macro}[aux]{\@@_process_fields:nn}
%   \begin{syntax}
%     \cs{__obj_process_fields:nn} \Arg{name} \Arg{specification}
%   \end{syntax}
%    \begin{macrocode}
\cs_new:Nn \@@_process_fields:nn
  {
    \parse_dictionary:nn {#2}
      {
%    \end{macrocode}
%   If we don't recognize this type, issue a warning.
%    \begin{macrocode}
        \clist_if_in:NVF
          \g_@@_types_clist
          \l_parse_dictionary_type_tl
          {
            \msg_warning:nnx { @@ } { unknown-type }
              { \tl_use:N \l_parse_dictionary_type_tl }
          }
%    \end{macrocode}
%   Create the specification property list.
%    \begin{macrocode}
        \@@_spec:nN {#1} \l_@@_tmp_prop
        \prop_put:NVV \l_@@_tmp_prop
          \l_parse_dictionary_key_tl
          \l_parse_dictionary_type_tl
        \@@_spec:Nn \l_@@_tmp_prop {#1}
%    \end{macrocode}
%   Create the prototype.
%    \begin{macrocode}
        \@@_proto:nN {#1} \l_@@_tmp_prop
        \prop_put:NVV \l_@@_tmp_prop
          \l_parse_dictionary_key_tl
          \l_parse_dictionary_value_tl
        \@@_proto:Nn \l_@@_tmp_prop {#1}
      }
  }
%    \end{macrocode}
% \end{macro}
% \begin{macro}[aux]{\@@_make_metas:nn}
%   \begin{syntax}
%     \cs{__obj_make_metas:nn} \Arg{name}
%   \end{syntax}
%    \begin{macrocode}
\cs_new:Nn \@@_make_metas:n
  {
    \obj_method:nnn {#1} { show:N } { \prop_show:N ##1 }
%    \end{macrocode}
%   \begin{syntax}
%     \cs{?_new:N} \meta{object-var}
%   \end{syntax}
%    \begin{macrocode}
    \obj_method:nnn {#1} { new:N }
      {
        \@@_proto:nN {#1} \l_@@_tmp_prop
        \prop_set_eq:NN ##1  \l_@@_tmp_prop
      }
%    \end{macrocode}
%   \begin{syntax}
%     \cs{?_new:Nn} \meta{object-var} \Arg{fields}
%   \end{syntax}
%    \begin{macrocode}
    \obj_method:nnn {#1} { new:Nn }
      {
        \obj_use_method:nn {#1} { new:N } ##1
        \obj_use_method:nn {#1} { set:Nn } ##1 {##2}
%    \end{macrocode}
%   put in defaults
%    \begin{macrocode}
        \@@_proto:nN {#1} \l_@@_tmp_prop
        \prop_map_inline:Nn \l_@@_tmp_prop
          { \prop_put_if_new:Nnn ##1 {####1} {####2} }
      }
%    \end{macrocode}
% \begin{syntax}
%   \meta{obj-var} \Arg{field}
% \end{syntax}
%    \begin{macrocode}
    \obj_method:nnn {#1} { get:Nn }
      { \prop_item:Nn ##1 {##2} }
%    \end{macrocode}
%    \begin{macrocode}
    \obj_method:nnn {#1} { set:Nn }
      {
        \prop_clear_new:N ##1
        \@@_spec:nN {#1} \l_@@_tmp_prop
        \parse_prop:nn {##2}
          {
            \prop_if_in:NVF \l_@@_tmp_prop \l_parse_prop_key_tl
              {
                \msg_warning:nnxx { obj } { unknown-field } {#1}
                  { \tl_use:N \l_parse_prop_key_tl }
              }
            \prop_put:NVV ##1 \l_parse_prop_key_tl \l_parse_prop_value_tl
          }
      }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\obj_show:n}
%    \begin{macrocode}
\cs_new:Nn \obj_show:n
  {
    \@@_spec:nN {#1} \l_@@_tmp_prop
    \prop_show:N \l_@@_tmp_prop
    \@@_proto:nN {#1} \l_@@_tmp_prop
    \prop_show:N \l_@@_tmp_prop
  }
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\obj_method:nnn,\obj_use_method:nn,\obj_this:nN}
%    \begin{macrocode}
\cs_new:Nn \obj_method:nnn
  {
    \cs_new:cn { #1_#2 }
      {
        \cs_set:Nn \obj_this:nN
          { \prop_get:NnN ##1 {####1} ####2 }
        #3
      }
  }
\cs_new:Nn \obj_use_method:nn { \use:c { #1_#2 } }
%    \end{macrocode}
% \end{macro}
% \begin{macro}[aux]{\@@_make_getter:nn,\@@_make_getter:nn}
%    \begin{macrocode}
\cs_new:Nn \__obj_make_getter:nn
  { \obj_method:nnn {#1} { #2:N  } { \prop_item:Nn ##1 {#2}       } }
\cs_new:Nn \__obj_make_setter:nn
  { \obj_method:nnn {#1} { #2:Nn } { \prop_put:Nnn ##1 {#2} {##2} } }
%    \end{macrocode}
% \end{macro}
% \begin{macro}[aux]{\@@_setup:nNN,\@@_setup:n}
%   \begin{syntax}
%     \cs{@@_setup:nNN} \Arg{class-name} \meta{superclass-specification} \meta{superclass-prototype}
%   \end{syntax}
%    \begin{macrocode}
\cs_new:Nn \__obj_setup:nNN
  {
    \seq_new:c { g__obj_spec_#1_seq }
    \seq_put_left:cV  { g__obj_spec_#1_seq } #2
    \seq_put_right:cV { g__obj_spec_#1_seq } #3
  }
%    \end{macrocode}
% \begin{syntax}
%   \cs{@@_setup:n} \Arg{class-name}
% \end{syntax}
% No superclass.  Base off the empty property lists.
%    \begin{macrocode}
\cs_new:Nn \__obj_setup:n
  { \__obj_setup:nNN {#1} \c_empty_prop \c_empty_prop }
%    \end{macrocode}
% \end{macro}
% \begin{macro}[aux]{\@@_spec:nN,\@@_proto:nN,\@@_spec:Nn,\@@_proto:Nn}
%    \begin{macrocode}
\cs_new:Nn \__obj_spec:nN  { \seq_get_left:cN  { g__obj_spec_#1_seq } #2 }
\cs_new:Nn \__obj_proto:nN { \seq_get_right:cN { g__obj_spec_#1_seq } #2 }
%    \end{macrocode}
%   Set functions.
%    \begin{macrocode}
\cs_new:Nn \__obj_spec:Nn
  {
    \seq_pop_left:cN  { g__obj_spec_#2_seq } \l__obj_tmp_seq
    \seq_put_left:cV  { g__obj_spec_#2_seq } #1
  }
\cs_new:Nn \__obj_proto:Nn
  {
    \seq_pop_right:cN { g__obj_spec_#2_seq } \l__obj_tmp_seq
    \seq_put_right:cV { g__obj_spec_#2_seq } #1
  }
%    \end{macrocode}
% \end{macro}
% \section{Messages}
%    \begin{macrocode}
\tl_new:N \l__obj_tmp_tl
\seq_new:N \l__obj_tmp_seq
%    \end{macrocode}
%    \begin{macrocode}
\clist_new:N \g__obj_types_clist
\clist_set:Nn \g__obj_types_clist
  { obj, tl, seq, int, color }
%    \end{macrocode}
%    \begin{macrocode}
\msg_new:nnn { obj } { unknown-type }
  {
    The~type~you~have~provided~is~not~known~to~exist:~
    `#1'
  }
%    \end{macrocode}
%    \begin{macrocode}
\msg_new:nnn { obj } { unknown-field }
  {
    The~field~you~have~provided~is~not~known~to~exist~
    for~this~object:~`#1.#2'
  }
%    \end{macrocode}
% \section{Variants}
%    \begin{macrocode}
\cs_generate_variant:Nn \@@_make_getter:nn    { VV }
\cs_generate_variant:Nn \@@_make_setter:nn    { VV }
\cs_generate_variant:Nn \@@_setup:n           { V  }
\cs_generate_variant:Nn \@@_setup:nNN         { V  }
\cs_generate_variant:Nn \@@_spec:nN           { V  }
\cs_generate_variant:Nn \@@_proto:nN          { V  }
\cs_generate_variant:Nn \@@_spec:Nn           { NV }
\cs_generate_variant:Nn \@@_proto:Nn          { NV }
\cs_generate_variant:Nn \@@_process_fields:nn { V  }
\cs_generate_variant:Nn \@@_make_metas:n      { V  }
%    \end{macrocode}
%    \begin{macrocode}
%</package>
%    \end{macrocode}
%
% \end{implementation}
%
% \appendix
% \section{To-Do}
% \begin{itemize}
% \item Support |.|-scoping in \cs{obj_this:nN}:
% \begin{verbatim}
% \obj_method:nnn { car } { shiny_rims:N }
%   { \obj_this:nN { wheel . rim . color } \l_my_rim_color }
% \end{verbatim}
% \item Enforce |N|-type as |#1| in |#2| of \cs{obj_method:nnn}. Dynamic
%   \cs{obj_this:n} creation in \cs{obj_method:nnn} depends on |#1| of the
%   method being the object itself.
% \end{itemize}
%
% \newpage
% \section{Complete Example}
% ^^A\VerbatimInput[firstline=3,gobble=0]{obj-demo}
%
%\Finale
%
% \PrintChanges
% \PrintIndex
